#!/bin/sh

set -e

# requires zip, qemu-user-static (for qemu-debootstrap)
# needs 6.5GB free diskspace for building

# TODO:
#       - add "keep chroot" option
#       - add logging
#       - use timestamp and arch in output files
#       - allow PPAs to be added
#       - allow single deb to be injected

export LC_ALL=C

SUITE="trusty"
ARCH="armhf"

NOW=$(date +%Y%m%d)
OUTDIR="./out"

PREINSTALLED="true"
IMAGEFORMAT="plain"
PROJECT="ubuntu-touch"

cleanup()
{
	if [ -e "$CHROOT" ]; then
		umount $CHROOT/sys >/dev/null 2>&1 || true
		umount $CHROOT/proc >/dev/null 2>&1 || true
		rm -rf $CHROOT >/dev/null 2>&1 || true
	fi
}

trap cleanup 0 1 2 3 9 15

usage()
{
	echo "usage: $(basename $0)\n
	-h|--help		this page
	-a|--arch (i386|armhf)	pick an arch, default: armhf
	-m|--mirror (url)	url to local mirror
	-o|--outdir (dir)	output dir, default: ./out\n"
#	-k|--keep-chroot
#	-i|--inject-package
#	-p|--ppa-sources
#	-g|--ppa-gpg-key
	exit 1
}

SUDOARGS="$@"

while [ $# -gt 0 ]; do
	case "$1" in
		-h|--help)
			usage
			;;
		-a|--arch)
			[ -n "$2" ] && ARCH=$2 shift || usage
			;;
		-m|--mirror)
			[ -n "$2" ] && MIRROR=$2 shift || usage
			;;
		-o|--outdir)
			[ -n "$2" ] && OUTDIR=$2 shift || usage
			;;
		*)
			usage
			;;
	esac
	shift
done

case $ARCH in
	i386)
		MIRROR="${MIRROR:-http://archive.ubuntu.com/ubuntu}"
		BOOTSTRAP_BIN="debootstrap --arch i386"
		LB_BOOTSTRAP_QEMU_ARCHITECTURES=""
		LB_BOOTSTRAP_QEMU_STATIC=""
		;;
	armhf)
		MIRROR="${MIRROR:-http://ports.ubuntu.com/ubuntu-ports}"
		BOOTSTRAP_BIN="qemu-debootstrap --arch armhf"
		LB_BOOTSTRAP_QEMU_ARCHITECTURES="armhf"
		LB_BOOTSTRAP_QEMU_STATIC="/usr/bin/qemu-arm-static"
		;;
	*)
		usage
		;;
esac

BUILDOPTS="PREINSTALLED=${PREINSTALLED} \
	LB_BOOTSTRAP_QEMU_ARCHITECTURES=${LB_BOOTSTRAP_QEMU_ARCHITECTURES} \
	LB_BOOTSTRAP_QEMU_STATIC=${LB_BOOTSTRAP_QEMU_STATIC} \
	IMAGEFORMAT=${IMAGEFORMAT} \
	MIRROR=${MIRROR} \
	NOW=${NOW} \
	SUITE=${SUITE} \
	PROJECT=${PROJECT} \
	ARCH=${ARCH}"

[ $(id -u) -ne 0 ] && exec sudo $0 $SUDOARGS

CHROOT=$(mktemp -d /tmp/rootstock.XXXXX)

do_chroot()
{
	ROOT="$1"
	CMD="$2"
	chroot $ROOT mount -t proc proc /proc
	chroot $ROOT mount -t sysfs sys /sys
	chroot $ROOT $CMD
	chroot $ROOT umount /sys
	chroot $ROOT umount /proc
}

build_chroot()
{
	$BOOTSTRAP_BIN $SUITE $CHROOT $MIRROR
	echo "deb $MIRROR $SUITE main universe" >$CHROOT/etc/apt/sources.list
	do_chroot $CHROOT "apt-get -y update"
	do_chroot $CHROOT "apt-get -y install livecd-rootfs"
	mkdir -p $CHROOT/build
	chroot $CHROOT sh -c "cd /build && rm -rf auto && mkdir -p auto && \
		for f in config build clean; do ln -s /usr/share/livecd-rootfs/live-build/auto/\$f auto/; done"
	# hack for click package location
	sed -i 's,archive-team.internal,people.canonical.com/~ubuntu-archive,' \
		$CHROOT/usr/share/livecd-rootfs/live-build/ubuntu-touch/hooks/60-install-click.chroot
}

build_touch()
{
	chroot $CHROOT sh -c "cd /build && lb clean --purge"
	chroot $CHROOT sh -c "cd /build && $BUILDOPTS lb config"
	chroot $CHROOT sh -c "cd /build && $BUILDOPTS lb build"
}

create_android_zip()
{
	./phablet-build-scripts/ubuntu_data \
		-m phablet-build-scripts/META-INF \
		$CHROOT/build/livecd.ubuntu-touch.rootfs.tar.gz \
		-o livecd.ubuntu-touch.rootfs.zip
}

copy_artefacts()
{
	mkdir -p $OUTDIR
	for file in $(ls $CHROOT/build/livecd.*|grep -v .img); do
		cp $file $OUTDIR/$(echo $file|sed s/^.*livecd.//)
	done
}

build_chroot
build_touch
[ "$ARCH" = "armhf" ] && create_android_zip
copy_artefacts
